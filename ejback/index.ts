import express, { Request, Response } from "express";
import mongoose, { Document, Schema } from "mongoose";

// **Conexi√≥n a MongoDB Atlas**
const uri = "mongodb+srv://Aldahir:aldahir.05@cluster0.hpmmu.mongodb.net/proyIoT?retryWrites=true&w=majority&appName=Cluster0";

// **Interfaz para el modelo de contrase√±as**
interface IPassword extends Document {
  password: string;
  date: Date;
}

// **Esquema para la colecci√≥n `contrase√±asPuerta`**
const PasswordSchema: Schema = new Schema({
  password: { type: String, required: true, trim: true },
  date: { type: Date, default: Date.now },
});

// **Modelo basado en la colecci√≥n `contrase√±asPuerta`**
const PasswordModel = mongoose.model<IPassword>("contrase√±asPuerta", PasswordSchema);

// **Configuraci√≥n de Express**
const app = express();
app.use(express.json()); // Habilitar JSON en Express

// **Conexi√≥n a MongoDB Atlas**
mongoose
  .connect(uri)
  .then(() => console.log("‚úÖ Conectado a MongoDB Atlas"))
  .catch((err) => console.error("‚ùå Error conectando a MongoDB Atlas:", err));

// **Ruta para comparar la contrase√±a ingresada**
app.post("/compare-password", async (req: Request, res: Response): Promise<void> => {
  console.log("üîπ Solicitud recibida en /compare-password");
  console.log("üîπ Body recibido:", req.body);

  let { password } = req.body;

  if (!password) {
    console.log("‚ùå Falta la contrase√±a en la solicitud.");
    res.status(400).send("‚ùå Falta la contrase√±a en la solicitud.");
    return;
  }

  password = password.replace(/^["']|["']$/g, '').trim();

  console.log(`üîç Buscando contrase√±a en la BD: "${password}"`);

  try {
    // **Ver todas las contrase√±as en MongoDB**
    const allPasswords = await PasswordModel.find({}, { password: 1, _id: 0 });
    console.log("üîç Contrase√±as en la base de datos:", allPasswords);

    // **B√∫squeda flexible (sin importar may√∫sculas/min√∫sculas)**
    const storedPassword = await PasswordModel.findOne({
      password: { $regex: new RegExp(`^${password}$`, "i") } 
    });

    if (storedPassword) {
      console.log("‚úÖ Contrase√±a correcta encontrada en la BD.");
      res.send("OK");
    } else {
      console.log("‚ùå Contrase√±a incorrecta, no encontrada en la BD.");
      res.send("ERROR");
    }
  } catch (error) {
    console.error("‚ùå Error en la consulta:", error);
    res.status(500).send("Error en el servidor");
  }
});

// **Ruta para insertar una nueva contrase√±a en `contrase√±asPuerta`**
app.post("/insert-password", async (req: Request, res: Response): Promise<void> => {
  let { password } = req.body;

  if (!password) {
    res.status(400).send("‚ùå Falta la contrase√±a en la solicitud.");
    return;
  }

  password = password.replace(/^["']|["']$/g, '').trim();

  try {
    const newPassword = new PasswordModel({ password });
    await newPassword.save();
    console.log("‚úÖ Contrase√±a insertada correctamente:", password);
    res.send("Contrase√±a insertada correctamente");
  } catch (error) {
    console.error("‚ùå Error insertando contrase√±a:", error);
    res.status(500).send("Error insertando contrase√±a");
  }
});

// **Ruta de prueba para verificar conexi√≥n**
app.get("/test", (req: Request, res: Response): void => {
  res.send("‚úÖ Servidor funcionando correctamente");
});

// **Iniciar el servidor en el puerto 3000**
const PORT = 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Backend corriendo en http://localhost:${PORT}`);
});
